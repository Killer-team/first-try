#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <string>
#include <fstream>


using namespace std;
using namespace sf;


//variables.
Sound  titlescreen_music, menu_music, coin_sound, Level1_music, bossfight_music;
SoundBuffer  titlescreen_music1, menu_music1, coin_sound1, Level1_music1, bossfight1_music;
Texture titlescreen, menu, background_level_1, ring, sonic, enemies, boss;
Sprite titlescreen1, menu1, sonic1, background_level1[6], ring1[100], enemies1[20], boss1, bossCar1, bossE, bossM;
Font font;
Event event2, event3, event4;
Text menu2[5], currname, nom, scr, nam, scoretrack, ringstrack, scoretext, ringstext;
const float  ground = 420;
float time1 = 0, ypos = 0, yvel = 0, bossspeed = 0;
int  ring_rect = 0, ring_starting_position = 500, scoredrings = 0,
score = 0, numofplayers, scores_count = 0, notmoving = 0, mover = 0, moveu = 0, moved = 0, movel = 0,
timedanimation1 = 0, timedanimation2 = 0, timedanimation3 = 0, timedanimation4 = 0,
bosscount = 0, bossCarcount = 0, bossEcount = 0, y = 0, bossMcount = 0, bosshit = 0, bosslives = 30,
sspritearr[50] = { 178,68,248, 67,317, 66,385 ,67,454, 67,523 ,67,594,
                   73,670 ,67,741 ,69,815 ,78, 899 ,77,980 ,79,1062 ,91,
                   1156 ,91,1251 ,88,1345 ,86,1439 ,86,1531 ,63,1602 ,63 },
    dashspritearr[20] = { 543, 66, 612, 69, 699, 70, 775, 68, 849, 67, 920, 67, 991, 68, 1062, 68 },
    uspritearr[20] = { 1156, 67, 1234, 71, 1319, 68, 1397, 70, 1487, 70 },
    rspritearr[40] = { 36, 74, 117, 70, 194, 74, 276, 72, 393, 77, 472, 76, 550, 78, 630, 79, 743, 95, 842, 95, 941, 95, 1039, 95 },
    ringspritearr[30] = { 7, 56, 74, 52, 142, 44, 210, 35, 279, 25, 348, 16, 405, 25, 464, 35, 523, 44, 584, 52 },
    bossarr[6] = { 596, 202, 840, 244 },  bossCararr[6] = { 18, 248, 309, 247 },  bossEarr[16] = { 31, 329, 381, 294, 711, 261, 1024, 248, 1307, 247 },
    bossMarr[16] = { 41, 247, 326, 247, 604, 246, 899, 246, 1185, 247 },  bosscollarr[6] = { 42, 246, 320, 247 };




bool   lvl1 = 0, lvl2 = 0, lvl3 = 0, booly = 0, bossreachl = 0, bossreachr = 1, baby=0;


struct scores
{
    int num;
    string name;
    int scored;

};
scores players[100];
scores currscore;


//window settings.
RenderWindow window1(VideoMode(1000, 550), "Sonic The Hedgehog");


//boss entering with egg.
void BossEntrance() {

    boss1.setTextureRect(IntRect(bossarr[bosscount], 28, bossarr[bosscount + 1], 132));
    bosscount += 2;
    boss1.setPosition(686, 100);
    if (bosscount == 4) {
        bosscount = 0;
        boss1.setPosition(750, 100);
    }

    if (y != 245) {
        y += 5;
    }
    boss1.move(0, y);

    bossCar1.setTextureRect(IntRect(bossCararr[bossCarcount], 75, bossCararr[bossCarcount + 1], 162));
    bossCarcount += 2;

    if (bossCarcount == 4) {
        bossCarcount = 0;

    }
}


//car entrance.
void BossEntrance2() {

    bossE.setTextureRect(IntRect(bossEarr[bossEcount], 216, bossEarr[bossEcount + 1], 158));
    bossE.setPosition(655, 350);
    bossEcount += 2;
}


//boss movement.
void BossMovemnt()
{
    if (!sonic1.getGlobalBounds().intersects(bossM.getGlobalBounds()))
    {
        bossM.setTextureRect(IntRect(bossMarr[bossMcount], 434, bossMarr[bossMcount + 1], 136));
        bossMcount += 2;
        if (bossMcount == 10)
        {
            bossMcount = 6;
        }
    }

    if (bossreachl == 0)
    {
        bossspeed -= 0.5;
        bossM.move(bossspeed, 0);
    }


    if (bossM.getPosition().x <= 60)
    {
        bossM.setScale(-1, 1);
        bossM.move(200, 0);
        bossreachl = 1;
        bossreachr = 0;
        bossspeed = 0;
    }


    if (bossreachr == 0)
    {
        bossspeed += 0.5;
        bossM.move(bossspeed, 0);
    }


    if (bossM.getPosition().x >= 963)
    {
        bossM.setScale(1, 1);
        bossM.move(-200, 0);
        bossreachl = 0;
        bossreachr = 1;
        bossspeed = 0;
    }

    if (sonic1.getGlobalBounds().intersects(bossM.getGlobalBounds()) && sonic1.getPosition().y<bossM.getPosition().y)
    {
        bossM.setTextureRect(IntRect(bosscollarr[bosshit], 620, bosscollarr[bosshit + 1], 154));
        bosshit += 2;
        if (bosshit == 4)
        {
            bosshit = 0;
        }
        yvel = -15;
        bosslives--;
    }

}


//rings animation function to call in all levels.
void ringsanimation()
{

    ring_rect += 2;
    if (ring_rect == 20)
    {
        ring_rect = 0;
    }
    for (int i = 1; i <= 99; i++)
        ring1[i].setTextureRect(IntRect(ringspritearr[ring_rect], 5, ringspritearr[ring_rect + 1], 56));
}


//closing window.
void closing()
{
    Event event;
    while (window1.pollEvent(event))
    {
        if (event.type == Event::Closed)
        {
            window1.close();
            titlescreen_music.stop();
        }
    }
}


//score and rings tracking function.
void scoreandrings()
{
    scoretext.setFont(font);
    scoretext.setCharacterSize(30);
    scoretext.setString("Score");
    scoretext.setFillColor(Color::White);
    scoretext.setPosition(15, 10);
    ringstext.setFont(font);
    ringstext.setCharacterSize(30);
    ringstext.setString("Rings");
    ringstext.setFillColor(Color::White);
    ringstext.setPosition(15, 35);


    string s1, s2;
    s1 = to_string(scoredrings);
    s2 = to_string(currscore.scored);
    scoretrack.setFont(font);
    scoretrack.setFillColor(Color::White);
    scoretrack.setCharacterSize(30);
    scoretrack.setString(s2);
    scoretrack.setPosition(150, 10);
    ringstrack.setFont(font);
    ringstrack.setFillColor(Color::White);
    ringstrack.setCharacterSize(30);
    ringstrack.setString(s1);
    ringstrack.setPosition(150, 35);
}


//background scrolling right.
void backgroundscrollr(int x)
{
    //background scrolling.
    if (sonic1.getPosition().x >= 400)
    {
        background_level1[x].move(-10, 0);
        sonic1.move(-15, 0);
        for (int i = 1; i < 100; i++)
        {
            ring1[i].move(-10, 0);
        }

    }
}


//background scrolling left.
void backgroundscrolll(int x)
{
    //background scrolling.
    if (sonic1.getPosition().x <= 400 && background_level1[x].getPosition().x != 0)
    {
        background_level1[x].move(10, 0);
        sonic1.move(15, 0);
        for (int i = 1; i < 100; i++)
        {
            ring1[i].move(10, 0);
        }

    }
}


//moving character func.
void moving(int x)
{
    if (!Keyboard::isKeyPressed(Keyboard::Right))
    {
        mover = 0;
        timedanimation2 = 0;
    }
    if (!Keyboard::isKeyPressed(Keyboard::Left))
    {
        movel = 0;
        timedanimation4 = 0;
    }

    if (!Keyboard::isKeyPressed(Keyboard::Up) && sonic1.getPosition().y == ground)
    {
        moveu = 0;
    }

    if (!Keyboard::isKeyPressed(Keyboard::Down))
    {
        moved = 0;
    }


    //first position.
    timedanimation1++;
    sonic1.setTextureRect(IntRect(sspritearr[notmoving], 176, sspritearr[notmoving + 1], 94));
    timedanimation3++;
    if (timedanimation3 == 20)
    {
        if (timedanimation1 > 0)
            notmoving += 2;
        if (notmoving == 10 && timedanimation1 <= 20)
            notmoving = 6;
        else if (notmoving == 22 && timedanimation1 <= 80)
            notmoving = 16;
        else if (notmoving == 34)
            notmoving = 24;
        timedanimation3 = 0;
    }

    //moving left.
    if (Keyboard::isKeyPressed(Keyboard::Left))
    {
        sonic1.setScale(-1.f, 1.f);
        timedanimation1 = -100;
        notmoving = 0;
        if (background_level1[x].getPosition().x != 0)
            sonic1.move(-15.0f, 0.0f);

        if (background_level1[1].getPosition().x == -15000 && sonic1.getPosition().x <= 80)
        {
            sonic1.move(15.0f, 0.0f);
        }
        timedanimation4++;
        sonic1.setTextureRect(IntRect(rspritearr[movel], 863, rspritearr[movel + 1], 86));
        movel += 2;
        if (movel == 8 && timedanimation4 <= 20)
            movel = 0;
        else if (movel == 16 && timedanimation4 <= 50)
            movel = 8;
        else if (movel == 24)
            movel = 16;
    }

    //moving right.
    if (Keyboard::isKeyPressed(Keyboard::Right))
    {
        sonic1.setScale(1.f, 1.f);
        sonic1.move(15.0f, 0.0f);
        if (background_level1[1].getPosition().x == -15000 && sonic1.getPosition().x >= 920)
        {
           sonic1.move(-15.0f, 0.0f);
        }
        timedanimation1 = -100;
        notmoving = 0;
        timedanimation2++;
        sonic1.setTextureRect(IntRect(rspritearr[mover], 863, rspritearr[mover + 1], 86));
        mover += 2;
        if (mover == 8 && timedanimation2 <= 20)
            mover = 0;
        else if (mover == 16 && timedanimation2 <= 50)
            mover = 8;
        else if (mover == 24)
            mover = 16;
    }

    //spin .
    if (Keyboard::isKeyPressed(Keyboard::Down))
    {
        notmoving = 0;
        timedanimation1 = -100;
        sonic1.setTextureRect(IntRect(uspritearr[moved], 337, uspritearr[moved + 1], 70));
        moved += 2;
        if (moved == 10)
        {
            moved = 0;
        }
    }

    //jumping.
    if (Keyboard::isKeyPressed(Keyboard::Up))
    {
        notmoving = 0;
        timedanimation1 = -100;
        yvel += 1;
        ypos += yvel;

    }

    if (sonic1.getPosition().y < ground)
    {
        sonic1.setTextureRect(IntRect(uspritearr[moveu], 337, uspritearr[moveu + 1], 70));
        moveu += 2;
        if (moveu == 10)
            moveu = 0;
    }

    //gravity.
    if (ypos > ground)
        yvel = -22;


    if (!Keyboard::isKeyPressed(Keyboard::Up)) {
        if (ypos <= ground) {
            ypos = sonic1.getPosition().y;
            yvel += 1;
            ypos += yvel;
        }
    }

    sonic1.setPosition(sonic1.getPosition().x, ypos);

}


//start function.
void startfunc()
{
    menu2[4].setString("Type Your Name Then Press Enter");
    menu2[4].setFillColor(Color(63, 71, 204));
    menu2[4].setFont(font);
    menu2[4].setPosition(50, 300);
    menu2[4].setCharacterSize(30);
    currname.setPosition(180, 360);
    currname.setCharacterSize(30);
    currname.setFont(font);
    currname.setStyle(Text::Underlined);
    currname.setFillColor(Color(173, 148, 55));

    while (!Keyboard::isKeyPressed(Keyboard::Enter))
    {
        booly = 1;
        if (Keyboard::isKeyPressed(Keyboard::Escape))
        {
            booly = 0;
            break;
        }
        while (window1.pollEvent(event2))
        {
            currname.setString(currscore.name);
            if (event2.type == Event::KeyPressed)
            {
                switch (event2.key.code)
                {
                case Keyboard::A:
                    currscore.name.push_back('A');
                    break;
                case Keyboard::B:
                    currscore.name.push_back('B');
                    break;
                case Keyboard::C:
                    currscore.name.push_back('C');
                    break;
                case Keyboard::D:
                    currscore.name.push_back('D');
                    break;
                case Keyboard::E:
                    currscore.name.push_back('E');
                    break;
                case Keyboard::F:
                    currscore.name.push_back('F');
                    break;
                case Keyboard::G:
                    currscore.name.push_back('G');
                    break;
                case Keyboard::H:
                    currscore.name.push_back('H');
                    break;
                case Keyboard::I:
                    currscore.name.push_back('I');
                    break;
                case Keyboard::J:
                    currscore.name.push_back('J');
                    break;
                case Keyboard::K:
                    currscore.name.push_back('K');
                    break;
                case Keyboard::L:
                    currscore.name.push_back('L');
                    break;
                case Keyboard::M:
                    currscore.name.push_back('M');
                    break;
                case Keyboard::N:
                    currscore.name.push_back('N');
                    break;
                case Keyboard::O:
                    currscore.name.push_back('O');
                    break;
                case Keyboard::P:
                    currscore.name.push_back('P');
                    break;
                case Keyboard::Q:
                    currscore.name.push_back('Q');
                    break;
                case Keyboard::R:
                    currscore.name.push_back('R');
                    break;
                case Keyboard::S:
                    currscore.name.push_back('S');
                    break;
                case Keyboard::T:
                    currscore.name.push_back('T');
                    break;
                case Keyboard::U:
                    currscore.name.push_back('U');
                    break;
                case Keyboard::V:
                    currscore.name.push_back('V');
                    break;
                case Keyboard::W:
                    currscore.name.push_back('W');
                    break;
                case Keyboard::X:
                    currscore.name.push_back('X');
                    break;
                case Keyboard::Y:
                    currscore.name.push_back('Y');
                    break;
                case Keyboard::Z:
                    currscore.name.push_back('Z');
                    break;
                case Keyboard::BackSpace:
                    currscore.name.pop_back();
                    break;

                }
            }
            window1.clear();
            window1.draw(menu1);
            window1.draw(menu2[4]);
            window1.draw(currname);
            window1.display();
        }
    }
}


//Rings collision.
void collision(Sprite ring[])
{
    for (int i = 1; i < 100; i++)
    {
        if (sonic1.getGlobalBounds().intersects(ring[i].getGlobalBounds()))
        {
            coin_sound.play();
            scoredrings++;
            currscore.scored += 100;
            ring[i].setPosition(-1000, -1000);
        }
    }
}


//Rings counter.
void stats()
{
    ifstream scoress;
    scoress.open("saves/scores.txt");

    if (scoress.fail())
    {
        cout << "Fail";
        exit(1);
    }
    while (!scoress.eof())
    {
        scoress >> players[scores_count].num;
        scoress >> players[scores_count].name;
        scoress >> players[scores_count].scored;
        scores_count++;
    }
}


//Titlescreen.
void titlescreenfunc()
{
    titlescreen_music1.loadFromFile("Music/Green Hill Zone.ogg");
    titlescreen_music.setBuffer(titlescreen_music1);
    titlescreen_music.play();
    titlescreen_music.setLoop(true);

    while (!Keyboard::isKeyPressed(Keyboard::Space))
    {
        closing();
        titlescreen.loadFromFile("Sprites/background_titlescreen.png");
        titlescreen1.setTexture(titlescreen);

        window1.clear();
        window1.draw(titlescreen1);
        window1.display();

    }

    //sound plays to the end before leaving function.
    coin_sound.play();
    while (coin_sound.getStatus() == Sound::Playing);
}


//main menu.
void menufunc()
{

    int p = 0, t = 0;

    menu.loadFromFile("Sprites/menu.jpg");
    menu1.setTexture(menu);


    menu2[1].setString("Start");
    menu2[1].setFont(font);
    menu2[1].setPosition(10, 290);
    menu2[1].setCharacterSize(50);
    menu2[2].setString("Leaderboard");
    menu2[2].setFont(font);
    menu2[2].setPosition(10, 360);
    menu2[2].setCharacterSize(50);
    menu2[3].setString("exit");
    menu2[3].setFont(font);
    menu2[3].setPosition(10, 430);
    menu2[3].setCharacterSize(50);


    while (true)
    {
        //using closing function.
        closing();

        //mouse position at any time.
        Vector2i  mousep = Mouse::getPosition(window1);

        //to prevent key repeatation.
        t++;
        if (t == 150)
            t = 0;

        //moving between options in menu.
        if (Keyboard::isKeyPressed(Keyboard::Down) && t == 120)
        {
            p++;
            if (p == 4)
                p = 1;
            menu2[p].setFillColor(Color::Red);
        }
        else if (Keyboard::isKeyPressed(Keyboard::Up) && t == 120)
        {
            p--;
            if (p == 0)
                p = 3;
            menu2[p].setFillColor(Color::Red);
        }

        //when space is pressed after selecting an option.
        if (Keyboard::isKeyPressed(Keyboard::Space) && p == 1)
        {
            startfunc();
            if (booly == 1)
            {
                lvl1 = 1;
                titlescreen_music.stop();
                break;
            }
        }
        if (Keyboard::isKeyPressed(Keyboard::Space) && p == 2)
        {
            while (!Keyboard::isKeyPressed(Keyboard::Escape))
            {
                window1.clear();
                window1.draw(menu1);
                window1.display();
            }
        }
        if (Keyboard::isKeyPressed(Keyboard::Space) && p == 3)
        {
            break;
        }

        //when using mouse to select any option in menu.
        if ((mousep.x >= 10 && mousep.x <= 150) && (mousep.y >= 300 && mousep.y <= 350))
        {
            p = 0;
            menu2[1].setFillColor(Color::Red);
            if (Mouse::isButtonPressed(Mouse::Left) || Keyboard::isKeyPressed(Keyboard::Space))
            {
                startfunc();
                if (booly == 1)
                {
                    lvl1 = 1;
                    titlescreen_music.stop();
                    break;
                }
            }
        }
        else
        {
            if (p != 1)
            {
                coin_sound.play();
                menu2[1].setFillColor(Color(63, 71, 204));
            }
        }
        if ((mousep.x >= 10 && mousep.x <= 310) && (mousep.y >= 370 && mousep.y <= 420))
        {
            p = 0;
            menu2[2].setFillColor(Color::Red);
            if (Mouse::isButtonPressed(Mouse::Left) || Keyboard::isKeyPressed(Keyboard::Space))
            {
                nom.setFont(font);
                nom.setCharacterSize(20);
                nom.setFillColor(Color::White);
                nam.setFont(font);
                nam.setCharacterSize(20);
                nam.setFillColor(Color::White);
                scr.setFont(font);
                scr.setCharacterSize(20);
                scr.setFillColor(Color::White);


                window1.clear();
                window1.draw(menu1);
                window1.display();

            }
        }
        else
        {
            if (p != 2)
            {
                coin_sound.play();
                menu2[2].setFillColor(Color(173, 148, 55));
            }
        }
        if ((mousep.x >= 10 && mousep.x <= 100) && (mousep.y >= 440 && mousep.y <= 490))
        {
            p = 0;
            menu2[3].setFillColor(Color::Red);
            if (Mouse::isButtonPressed(Mouse::Left) || Keyboard::isKeyPressed(Keyboard::Space))
            {
                break;
            }
        }
        else
        {
            if (p != 3)
            {
                coin_sound.play();
                menu2[3].setFillColor(Color(173, 148, 55));
            }
        }


        window1.clear();
        window1.draw(menu1);
        window1.draw(menu2[1]);
        window1.draw(menu2[2]);
        window1.draw(menu2[3]);
        window1.display();
    }
}


//Level 1.
void Level1()
{

    window1.setFramerateLimit(40);

    //rings positions.
    ring1[1].setPosition(ring_starting_position = ring_starting_position + 50, 270);
    ring1[2].setPosition(ring_starting_position = ring_starting_position + 35, 210);
    ring1[3].setPosition(ring_starting_position = ring_starting_position + 50, 210);
    ring1[4].setPosition(ring_starting_position = ring_starting_position + 50, 270);
    ring1[5].setPosition(ring_starting_position = ring_starting_position - 50, 330);
    ring1[6].setPosition(ring_starting_position = ring_starting_position - 50, 330);
    ring1[7].setPosition(ring_starting_position = ring_starting_position + 1000, 50);
    for (int i = 8; i <= 12; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position + 50, 50);
    }
    ring1[13].setPosition(ring_starting_position = ring_starting_position + 1000, 100);
    for (int i = 14; i <= 18; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position + 50, 100);
    }
    ring1[19].setPosition(ring_starting_position = ring_starting_position - 50, 200);
    for (int i = 20; i <= 22; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position - 50, 200);
    }
     ring1[23].setPosition(ring_starting_position = ring_starting_position + 100, 280);
     ring1[24].setPosition(ring_starting_position = ring_starting_position - 50, 280);
     ring1[26].setPosition(ring_starting_position = ring_starting_position + 950, 190);
     ring1[27].setPosition(ring_starting_position = ring_starting_position + 50, 220);
     ring1[28].setPosition(ring_starting_position = ring_starting_position + 50, 190);
     ring1[29].setPosition(ring_starting_position = ring_starting_position + 50, 220);
     ring1[30].setPosition(ring_starting_position = ring_starting_position + 50, 190);
     ring1[31].setPosition(ring_starting_position = ring_starting_position + 50, 220);
     ring1[32].setPosition(ring_starting_position = ring_starting_position + 50, 190);
     ring1[33].setPosition(ring_starting_position = ring_starting_position + 50, 220);
     ring1[34].setPosition(ring_starting_position = ring_starting_position + 800, 150);
    for (int i = 35; i < 40; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position + 50, 150);
    }
      ring1[41].setPosition(ring_starting_position = ring_starting_position + 850, 90);
      ring1[43].setPosition(ring_starting_position = ring_starting_position + 50, 70);
      ring1[44].setPosition(ring_starting_position = ring_starting_position + 50, 90);
      ring1[45].setPosition(ring_starting_position = ring_starting_position + 50, 70);
      ring1[46].setPosition(ring_starting_position = ring_starting_position + 50, 90);
      ring1[47].setPosition(ring_starting_position = ring_starting_position + 50, 70);
      ring1[48].setPosition(ring_starting_position = ring_starting_position + 50, 90);
      ring1[49].setPosition(ring_starting_position = ring_starting_position + 800, 80); 
    for (int i = 50; i < 60; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position + 50, 80);
    }
        ring1[60].setPosition(ring_starting_position = ring_starting_position + 750, 400);
        ring1[61].setPosition(ring_starting_position = ring_starting_position + 850, 90);
        ring1[63].setPosition(ring_starting_position = ring_starting_position + 50, 70);
        ring1[64].setPosition(ring_starting_position = ring_starting_position + 50, 90);
        ring1[65].setPosition(ring_starting_position = ring_starting_position + 800, 70);
        ring1[67].setPosition(ring_starting_position = ring_starting_position + 50, 90);
        ring1[68].setPosition(ring_starting_position = ring_starting_position + 50, 70);
        ring1[69].setPosition(ring_starting_position = ring_starting_position + 800, 400);
    for (int i = 70; i < 75; i++)
    {
        ring1[i].setPosition(ring_starting_position = ring_starting_position + 50, 400);
    }
        ring1[75].setPosition(ring_starting_position = ring_starting_position + 750, 70);
        ring1[76].setPosition(ring_starting_position = ring_starting_position + 50, 90);
        ring1[77].setPosition(ring_starting_position = ring_starting_position + 50, 70);
        ring1[78].setPosition(ring_starting_position = ring_starting_position + 750, 90);
        ring1[79].setPosition(ring_starting_position = ring_starting_position + 50, 70);
        ring1[80].setPosition(ring_starting_position = ring_starting_position + 50, 90);


    //background.
    background_level_1.loadFromFile("Sprites/background.jpg");
    background_level1[1].setTexture(background_level_1);


    //Level 1 background music.
    Level1_music1.loadFromFile("Music/Green Hill Zone.ogg");
    Level1_music.setBuffer(Level1_music1);
    Level1_music.play();

    //level 1 boss fight music.
    bossfight1_music.loadFromFile("Music/Boss.ogg");
    bossfight_music.setBuffer(bossfight1_music);

    boss.loadFromFile("Sprites/boss.png");
    boss1.setTexture(boss);
    boss1.setPosition(750, 100);
    bossCar1.setTexture(boss);
    bossCar1.setPosition(655, 420);
    bossE.setTexture(boss);
    bossM.setTexture(boss);
    bossM.setPosition(655, 370);


    while (window1.isOpen())
    {
        //using moving function.
        moving(1);

        //boss fight music.
       if (background_level1[1].getPosition().x == -15000 && bossfight_music.getStatus()!=bossfight_music.Playing)
        {
            Level1_music.stop();
            bossfight_music.play();
        }

        if (y != 245 && background_level1[1].getPosition().x == -15000)
            BossEntrance();

        if (y == 245 && bossEcount < 10 && background_level1[1].getPosition().x == -15000)
            BossEntrance2();

        if (bossEcount >= 10 && background_level1[1].getPosition().x == -15000 && bosslives!=0)
            BossMovemnt();



        //closing window.
        closing();

        //animation of rings function.
        ringsanimation();

        //using ring collision function on the array of rings.
        collision(ring1);

        //using background scrolling right function.
        if (background_level1[1].getPosition().x!=-15000)
        backgroundscrollr(1);

        //using background scrolling left function.
        if (background_level1[1].getPosition().x !=-15000)
        backgroundscrolll(1);

        //trackig of rings and score.
        scoreandrings();

        //drawing.
        window1.clear();
        window1.draw(background_level1[1]);
        for (int i = 1; i <= 99; i++)
        {
            window1.draw(ring1[i]);
        }
        window1.draw(sonic1);
        if (y != 245 && background_level1[1].getPosition().x == -15000)
        {
        window1.draw(boss1);
        window1.draw(bossCar1);
        }

        if (y == 245 && bossEcount < 10 && background_level1[1].getPosition().x == -15000)
        {
           window1.draw(bossE);
        }
        if (bosslives == 0)
        {
            bossM.setTextureRect(IntRect(610, 613, 230, 153));
        }
        if (bossEcount >= 10 && background_level1[1].getPosition().x == -15000)
        {
            window1.draw(bossM);
        }
        window1.draw(scoretext);
        window1.draw(ringstext);
        window1.draw(scoretrack);
        window1.draw(ringstrack);
        window1.display();
    }
}


//main game.
int main()
{
    //rings.
    ring.loadFromFile("Sprites/rings.png");
    for (int i = 0; i < 100; i++)
    {
        ring1[i].setTexture(ring);
    }

    //Game font.
    font.loadFromFile("Raisin Bread.ttf");

    //ring sound.
    coin_sound1.loadFromFile("Music/Mario-coin-sound.wav");
    coin_sound.setBuffer(coin_sound1);

    //Character first position.
    sonic.loadFromFile("Sprites/sonic.png");
    sonic1.setTexture(sonic);
    sonic1.setPosition(15, ground);

    //titlescreen.
     titlescreenfunc();

    //menuscreen.
     menufunc();

    //level 1 start.
     if (lvl1)
        Level1();

}
